// Generated by gencpp from file actions_tutorial/dockGoal.msg
// DO NOT EDIT!


#ifndef ACTIONS_TUTORIAL_MESSAGE_DOCKGOAL_H
#define ACTIONS_TUTORIAL_MESSAGE_DOCKGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace actions_tutorial
{
template <class ContainerAllocator>
struct dockGoal_
{
  typedef dockGoal_<ContainerAllocator> Type;

  dockGoal_()
    : number_of_minutes(0)  {
    }
  dockGoal_(const ContainerAllocator& _alloc)
    : number_of_minutes(0)  {
  (void)_alloc;
    }



   typedef int32_t _number_of_minutes_type;
  _number_of_minutes_type number_of_minutes;





  typedef boost::shared_ptr< ::actions_tutorial::dockGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::actions_tutorial::dockGoal_<ContainerAllocator> const> ConstPtr;

}; // struct dockGoal_

typedef ::actions_tutorial::dockGoal_<std::allocator<void> > dockGoal;

typedef boost::shared_ptr< ::actions_tutorial::dockGoal > dockGoalPtr;
typedef boost::shared_ptr< ::actions_tutorial::dockGoal const> dockGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::actions_tutorial::dockGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::actions_tutorial::dockGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace actions_tutorial

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'actions_tutorial': ['/home/tthmatt/ld_ROS/devel/.private/actions_tutorial/share/actions_tutorial/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/melodic/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::actions_tutorial::dockGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::actions_tutorial::dockGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::actions_tutorial::dockGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::actions_tutorial::dockGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::actions_tutorial::dockGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::actions_tutorial::dockGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::actions_tutorial::dockGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "08fc95c12e8d6b627afb5f6c3337b8ec";
  }

  static const char* value(const ::actions_tutorial::dockGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x08fc95c12e8d6b62ULL;
  static const uint64_t static_value2 = 0x7afb5f6c3337b8ecULL;
};

template<class ContainerAllocator>
struct DataType< ::actions_tutorial::dockGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "actions_tutorial/dockGoal";
  }

  static const char* value(const ::actions_tutorial::dockGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::actions_tutorial::dockGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Goal\n"
"int32 number_of_minutes\n"
"\n"
;
  }

  static const char* value(const ::actions_tutorial::dockGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::actions_tutorial::dockGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.number_of_minutes);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct dockGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::actions_tutorial::dockGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::actions_tutorial::dockGoal_<ContainerAllocator>& v)
  {
    s << indent << "number_of_minutes: ";
    Printer<int32_t>::stream(s, indent + "  ", v.number_of_minutes);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ACTIONS_TUTORIAL_MESSAGE_DOCKGOAL_H
